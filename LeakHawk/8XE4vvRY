/* 1.Дефиниция
struct elem
{
int key;
elem *prev;
elem *next;
}
*start=NULL;
2. Основни операции
а) инициализация
б) включване на елемент
- включване на елемент в началото
void add_b(int n)
{
elem *p=start;
start=new elem; // заделяне на памет
start->key=n;
start->prev=NULL;
start->next=p;
if(p)
p->prev=start;
}
- добавяне на елемент в края на списъка
void add_e(int n)
{
elem *p=start, *q;
zadelqne na pamet - q=new elem;
q->key=n;
q->next=NULL;
proverka dali ima drugi elementi v spisuka - if (start)
{
while (p->next)
p=p->next;
p->next=q;
}
else
start=q;
}
- включване на елемент в средата на списъка след друг чиято стойност е К 
(приемаме че елементът със стойност К съществува) т.е проверка дали елемента К съществува в списъка
void add_mid1(int n, int k)
{
elem *p=start, *q;
while (p->key!=k)
p=p->next;
zadelqne na pamet za noviq element koito shte dobavim - q=new elem;
q->key=n;
q->next=p->next;
p->next=prev=q;
p->next=q;
q->prev=p;
}
- реализиране на елемент в средата на списъка пред друг чиято стойност е К (приемаме че елемента К съществува)
void add_mid2(int n, int k)
{
elem *p=start, *q;
while (p->key!=k)
p=p->next;
q=new elem;
q->next=p->next;
q->key=p->key;
p->next=q;
p->key=key;
}
в) изтриване/изключване на елемент от списъка
- изтриване на елемент от началото на списъка (изключване на първи елемент)
int del_b(int &n)
{
elem *p=start;
if (start)
{
n=start->key;
premestvane na ukz start - start=start->next;
delete p;
return 1;
}
else
return 0;
}
- изтриване на последен елемент от списъка
int del_e(int &n)
proverka dali ima elementi v spisuka - {
elem *p=start, *q;
if (start)
{
if (p->next)
{
p da otide v kraq na spisuka a q predposledno - while(p->next)
{
q=p;
p=p->nesx;
}
predposlednia element da stane posleden - q->nesx=NULL;
}
else
start=NULL;
krainata stoinost - n=p->key;
delete p;
return 1
}
else
return 0;
}
г) отпечатване/извеждане на елемент от списъка
void list()
{
elem *p=start;
incializirane na element ot nachaloto na spisuka - if (start)
{
cout<<"Елементите в списъка са ";
while(p)
{
cout<<p->key<<"\t";
p=p->next;
}
}
else 
cout<<"Списъка е празен";
}
д) търсене на елемент в списъка ако го има връща 1 ако не 0
int search_iter(int n)
{
elem *p=start;
if (start)
{
while ((p->key!=n)&&(p->next))
p=p->next;
if (p->key==n)
return 1;
else
return 0;
}
else
return 0;
}
*/
