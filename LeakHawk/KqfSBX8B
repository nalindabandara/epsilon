protected override void OnDraw(Canvas canvas)
    {
        base.OnDraw(canvas);

        int xPoint = MeasuredWidth / 2;
        int yPoint = MeasuredHeight / 2;



        int radius = (int)(Math.Max(xPoint, yPoint) * 0.6);
        int blipRadius = (int)(2 * radius / 2);

        canvas.DrawCircle(xPoint, yPoint, radius, paint);
        //canvas.DrawRect(0, 0, MeasuredWidth, MeasuredHeight, paint);

        Paint gridPaint = mGridPaint;

        canvas.DrawCircle(xPoint, yPoint, radius, gridPaint);
        canvas.DrawCircle(xPoint, yPoint, radius * 3 / 4, gridPaint);
        canvas.DrawCircle(xPoint, yPoint, radius >> 1, gridPaint);
        canvas.DrawCircle(xPoint, yPoint, radius >> 2, gridPaint);
        // 3.143 is a good approximation for the circle

        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(-position) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(-position) / 180 * 3.143)), paint);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(-position + 30) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(-position + 30) / 180 * 3.143)), paint);
        canvas.DrawText(position.ToString(), xPoint, yPoint, paint);

        mBearing = bearing(18.5011, 73.9242, 18.5011, 73.9242);
        double bearingToTarget = mBearing - position;
        double drawingAngle = ConvertToRadians(bearingToTarget) - (Math.PI / 2);

        float cos = (float)Math.Cos(drawingAngle);
        float sin = (float)Math.Sin(drawingAngle);

        canvas.DrawBitmap(mBlip, xPoint + (cos * blipRadius) - 8, xPoint + (sin * blipRadius) - 8, gridPaint);

        //float degrees = 0;
        //Point point = getPointOnCircle(xPoint, degrees, radius);


        // new code for drawing lines out from circle

        RectF rect1 = new RectF();
        int mWidth = xPoint;
        int mHeight = yPoint;
        int mRadius = 130, mRadius1 = 50;
        rect1.Set(mWidth - (mRadius - mRadius1), mHeight - (mRadius - mRadius1), mWidth + (mRadius - mRadius1), mHeight + (mRadius - mRadius1));

        Paint paintLines = new Paint();
        paintLines.Color = Color.Argb(255, 000, 255, 000);
        paintLines.StrokeWidth = 2f;
        mSweepPaint2.AntiAlias = true;
        paintLines.StrokeCap = Paint.Cap.Butt;
        paintLines.SetStyle(Paint.Style.Stroke);



        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin(0 / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 30) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 30) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 60) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 60) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 90) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 90) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 120) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 120) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 150) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 150) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 180) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 180) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 210) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 210) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 240) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 240) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 270) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 270) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 300) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 300) / 180 * 3.143)), paintLines);
        canvas.DrawLine(xPoint, yPoint, (float)(xPoint + radius * Math.Sin((double)(0 + 330) / 180 * 3.143)), (float)(yPoint - radius * Math.Cos((double)(0 + 330) / 180 * 3.143)), paintLines);



    }
