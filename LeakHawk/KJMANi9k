package takr2;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

public class MainClass {

	private int port = 1235;
	private String ip = "127.0.0.1";
	
	private ProtocolSec protocol;
	private boolean run = true;
	private boolean sec = false;
	private String text;
	
	private BufferedReader inFromServer;
	private DataOutputStream outToServer;
	

	public static void main(String[] args) {
		
		MainClass takr = new MainClass();
		
		try {
			takr.clien();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	

	private void clien() throws IOException{
		
		System.out.println("Klient spusten");
		
		
		/* presmerovani syestemoveho vstupu do objektu inFromUser */
		BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));
		
		/* pripojeni na vzdalene ip a port*/
		Socket clientSocket = new Socket(ip, port);
	    System.out.println("Ustanoveno spojení s IP "+ ip +", port "+ port);
	    
		outToServer = new DataOutputStream(clientSocket.getOutputStream());
        inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
		
		System.out.println("------------------------------------------");
		System.out.println("Volba: zabezpeceny mod (sec), ukonceni modu/komunikace (exit)");
		System.out.println("------------------------------------------");
  
        System.out.println("Vlozte text zpravy: ");
        
        while(run){
        	
        	boolean auth = false;
        	boolean agreement = false;
        	
        	/*ceka na data od uzivatele - console*/
        	text = inFromUser.readLine();
            outToServer.writeBytes(text + "\n");
            
            /*ceka na data od serveru*/
            text = inFromServer.readLine();
            printServer(text);       
        
            /*prijdeli od serveru volba "Secure channal!" prepne se mod*/
	        if(text.equals("Secure channal!")){
	        	System.out.println("Secure mode aktivni!");  
	        	sec = true;
	        	protocol = new ProtocolSec();
	        	
	        	auth = authentication();
	        	agreement = KeyAgreement();
	        
	        /*prijdeli od serveru volba "Ukoncene spojeni!" ukonci se spojeni*/
	        }else if(text.equals("Ukoncene spojeni!")){
	        	System.out.println("Exit - ukonceni spojeni");  
	        	run = false;
	        }
	        
	        while (sec && auth && agreement) {
	        	        		        	
	        	System.out.println("Sifrovano!");
	        	
	        	text = inFromUser.readLine();
	        	
	        	try {
					text = protocol.encrypt(text);
					outToServer.writeBytes(text + "\n");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	            
	        	text = inFromServer.readLine();
	        	
	        	try {
					text = protocol.decrypt(text);
					System.out.println("FROM SERVER:" + text);   
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        	
	        	/*prijdeli od serveru volba "Secure channal exit!" vypne se zabezpecene spojeni*/
	            if(text.equals("Secure channal exit!")){
	            	System.out.println("Secure mode exit!\n");
	            	sec = false;
	            }
	            
	        }
        }
        clientSocket.close();
	}
	
	/**
	 * metoda provadejici autentizaci uzivatele pomoci RSA podpisu
	 * @return
	 */
	private boolean authentication(){
		
		try {
			
			// vypocte RSA, odesle pk
			protocol.genRSA();
			text = protocol.getPublicKey();
			outToServer.writeBytes(text+ "\n");
			
			//prijme RND, vypocte podpis
			text = inFromServer.readLine();
			text = protocol.sign(text);
			outToServer.writeBytes(text+ "\n");
			
			System.out.println("autentizace ok KLIENT");
			return true;
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("chyba autentizace KLIENT");
		}
	
		return false;
	}
	
	/**
	 * Metoda provadejici sjednoceni klíèe pomoci DH
	 * @return
	 */
	private boolean KeyAgreement(){
		
		try {
			
			// generuje DH, odesle PK
			text = protocol.genDH();
		
	    	outToServer.writeBytes(text+ "\n");
	    	
	    	// spocita sdileny klic
	    	text = inFromServer.readLine();
			protocol.procDH(text);
			
			return true;
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			System.out.println("chyba sjednoceni klice DH KLIENT");
		}
    	
		return false;
	}
	
	private void printServer(String text){
		System.out.println("SERVER: " + text);
	}
	
	
}
